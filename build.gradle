plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.24'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.9.24'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'de.bashburg.springbook'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2023.0.3")
    set('testcontainersVersion', '1.20.1')
    set('redisTestcontainersVersion', '2.2.2')
    set('otelVersion', '1.33.6') //FIXME update to 2.x
}

dependencies {
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-reactor'
    implementation 'org.springframework.cloud:spring-cloud-starter-gateway'
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.session:spring-session-data-redis'
    implementation platform("org.testcontainers:testcontainers-bom:${testcontainersVersion}")
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'io.github.resilience4j:resilience4j-micrometer'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation "com.redis:testcontainers-redis:${redisTestcontainersVersion}"
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.4.0'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
        jvmToolchain(17)
    }
}

if (System.getProperty("os.name").toLowerCase().contains("mac")) {
    tasks.named("bootBuildImage") {
        docker {
            host = "/Users/ambi/.local/share/containers/podman/machine/podman.sock"
        }
    }
}

bootBuildImage {
    imageName = "${project.name}"
    environment = ["BP_JVM_VERSION": "21.*"]

    builder = "dashaun/builder:tiny"

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername")
            password = project.findProperty("registryToken")
            url = project.findProperty("registryUrl")
        }
    }
}


tasks.named('test') {
    useJUnitPlatform()
}
